Claro! Abaixo est√£o os **gabaritos (solu√ß√µes comentadas)** para a lista de exerc√≠cios envolvendo **listas e dicion√°rios em Python**:

---

## ‚úÖ GABARITO ‚Äì Exerc√≠cios de Listas e Dicion√°rios em Python

---

### üìò Parte 1 ‚Äì **Listas**

#### 1. **Soma de Elementos**

```python
numeros = [1, 2, 3, 4, 5]
soma = sum(numeros)
print("Soma:", soma)
```

#### 2. **Contar Ocorr√™ncias**

```python
palavras = input("Digite palavras separadas por espa√ßo: ").split()
ocorrencias = {}

for palavra in palavras:
    if palavra in ocorrencias:
        ocorrencias[palavra] += 1
    else:
        ocorrencias[palavra] = 1

print(ocorrencias)
```

#### 3. **Remover Duplicatas**

```python
numeros = [1, 2, 2, 3, 4, 4, 5]
sem_duplicatas = list(set(numeros))
print("Sem duplicatas:", sem_duplicatas)
```

#### 4. **Maior e Menor Elemento**

```python
numeros = [10, 5, 8, 20, 2]
print("Maior:", max(numeros))
print("Menor:", min(numeros))
```

#### 5. **Lista Invertida**

```python
nomes = ["Ana", "Bruno", "Carlos"]
invertida = list(reversed(nomes))
print("Invertida:", invertida)
```

#### 6. **Filtrar N√∫meros Pares**

```python
numeros = [1, 2, 3, 4, 5, 6]
pares = [n for n in numeros if n % 2 == 0]
print("Pares:", pares)
```

#### 7. **Interse√ß√£o entre listas**

```python
lista1 = [1, 2, 3, 4]
lista2 = [3, 4, 5, 6]
intersecao = list(set(lista1) & set(lista2))
print("Interse√ß√£o:", intersecao)
```

---

### üìò Parte 2 ‚Äì **Dicion√°rios**

#### 1. **Cadastro de Alunos**

```python
alunos = {"Jo√£o": 7.5, "Maria": 9.0}
nome = input("Digite o nome do aluno: ")
print("Nota:", alunos.get(nome, "Aluno n√£o encontrado"))
```

#### 2. **Contador de Caracteres**

```python
palavra = input("Digite uma palavra: ")
contador = {}

for letra in palavra:
    if letra in contador:
        contador[letra] += 1
    else:
        contador[letra] = 1

print(contador)
```

#### 3. **Converter Lista para Dicion√°rio**

```python
chaves = ["nome", "idade"]
valores = ["Lucas", 25]
dicionario = dict(zip(chaves, valores))
print(dicionario)
```

#### 4. **Contador de Palavras**

```python
texto = input("Digite um texto: ").lower().split()
contador = {}

for palavra in texto:
    if palavra in contador:
        contador[palavra] += 1
    else:
        contador[palavra] = 1

print(contador)
```

#### 5. **Estoque de Produtos**

```python
estoque = {"caneta": 10, "caderno": 5}
produto = input("Digite o produto: ")

if produto in estoque:
    print(f"Quantidade de {produto}: {estoque[produto]}")
else:
    print("Produto n√£o encontrado.")
```

---

### üìò Parte 3 ‚Äì **Listas + Dicion√°rios**

#### 1. **Lista de Dicion√°rios - Agenda Telef√¥nica**

```python
agenda = [
    {"nome": "Ana", "telefone": "1234", "email": "ana@email.com"},
    {"nome": "Bruno", "telefone": "5678", "email": "bruno@email.com"}
]

busca = input("Digite o nome: ")
for contato in agenda:
    if contato["nome"].lower() == busca.lower():
        print(contato)
        break
else:
    print("Contato n√£o encontrado.")
```

#### 2. **Boletim Escolar**

```python
aluno = input("Nome do aluno: ")
notas = []

for i in range(3):
    nota = float(input(f"Nota {i+1}: "))
    notas.append(nota)

boletim = {
    "nome": aluno,
    "notas": notas,
    "m√©dia": sum(notas) / len(notas)
}

print(boletim)
```

#### 3. **Ranking de Pontua√ß√£o**

```python
nomes = ["Ana", "Jo√£o", "Paulo"]
pontos = [10, 20, 15]
ranking = dict(zip(nomes, pontos))

ranking_ordenado = dict(sorted(ranking.items(), key=lambda x: x[1], reverse=True))
print(ranking_ordenado)
```

#### 4. **Lista de Compras com Pre√ßos**

```python
compras = {}
while True:
    item = input("Produto (ou 'fim'): ")
    if item.lower() == "fim":
        break
    preco = float(input("Pre√ßo: "))
    compras[item] = preco

total = sum(compras.values())
print("Total da compra:", total)
```

#### 5. **Dicion√°rio de Dicion√°rios**

```python
usuarios = {}

while True:
    usuario = input("Usu√°rio (ou 'sair'): ")
    if usuario.lower() == "sair":
        break
    idade = int(input("Idade: "))
    cidade = input("Cidade: ")

    usuarios[usuario] = {
        "idade": idade,
        "cidade": cidade
    }

print(usuarios)
```

---

Se quiser, posso gerar um **PDF organizado com enunciados e solu√ß√µes**, ou montar como um **notebook Jupyter** para entrega em sala. Deseja isso?
